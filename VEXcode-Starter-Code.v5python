{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:      VEXcode Project\n#\tAuthor:       VEX\n#\tCreated:\n#\tDescription:  VEXcode V5 Python Project\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\n\n# Begin project code\n\nimport threading\n \nclass Singleton:\n    def __init__(self, klass):\n        self.klass = klass\n        self.instance = None\n \n    def __call__(self, *args,**kwds):\n        if self.instance is None:\n            self.instance = self.klass(*args, **kwds)\n        return self.instance\n \n@Singleton\nclass Control:\n\tlock = threading.Lock()\n    def __init__(self):\n        self.drive_task_running: bool = True\n \n    def control_task(self, the_task, running_state=True):\n        self.lock.acquire()\n    \tthe_task = running_state\n        self.lock.release()\n \n    def disable_drive_task(self):\n        self.control_task(self.drive_task_running, False)\n \n    def enable_drive_task(self):\n        self.control_task(self.drive_task_running, True)\n \ndef drive_task():\n\tcontrol = Control()\n    while True:\n        if control.drive_task_running:\n            power = controller_1.axis3.position()\n            turn = controller_1.axis4.position()\n        \tleft = power + turn;\n        \tright = power - turn;\n \n            brain.screen.clear_row(1)\n            brain.screen.clear_row(2)\n            brain.screen.set_cursor(1,1)\n            brain.screen.print(right)\n            brain.screen.set_cursor(2,1)\n            brain.screen.print(left)\n \n        \tleft_drive_smart.set_velocity(left, PERCENT)\n \n        \tright_drive_smart.set_velocity(right, PERCENT)\n\t        left_drive_smart.spin(FORWARD)\n        \tright_drive_smart.spin(FORWARD)\n \n        wait(5, MSEC)\n \ndef turn_right(degrees=0, power=100):\n\tdrivetrain.set_turn_velocity(80, PERCENT)\n\tdrivetrain.turn_for(RIGHT, 90, DEGREES)\n \ndef buttons_task():\n\tcontrol = Control()\n    while True:\n        if controller_1.buttonA.pressing():\n        \tcontrol.disable_drive_task()\n        \tturn_right(degrees=80, power=80)\n        \tcontrol.enable_drive_task()\n \n        wait(5, MSEC)\n \ndef simple_auton():\n\tdrivetrain.set_drive_velocity(80, PERCENT)\n\tdrivetrain.set_turn_velocity(80, PERCENT)\n\tdrivetrain.drive_for(FORWARD, 10, INCHES)\n\tdrivetrain.turn_for(RIGHT, 90, DEGREES)\n\tdrivetrain.drive_for(FORWARD, 10, INCHES)\n\tdrivetrain.turn_for(RIGHT, 90, DEGREES)\n\tdrivetrain.drive_for(FORWARD, 10, INCHES)\n\tdrivetrain.turn_for(RIGHT, 90, DEGREES)\n\tdrivetrain.drive_for(FORWARD, 10, INCHES)\n \ndef when_started1():\n    global myVariable\n    pass\n \ndef onauton_autonomous_0():\n\tsimple_auton()\n    pass\n \ndef ondriver_drivercontrol_0():\n \n\tdrive_task_0 = Thread( drive_task )\n\tbuttons_task_0 = Thread( buttons_task )\n \n    while True:\n        wait(5, MSEC)\n \n# create a function for handling the starting and stopping of all autonomous tasks\ndef vexcode_auton_function():\n    # Start the autonomous control tasks\n\tauton_task_0 = Thread( onauton_autonomous_0 )\n    # wait for the driver control period to end\n    while( competition.is_autonomous() and competition.is_enabled() ):\n        # wait 10 milliseconds before checking again\n        wait( 10, MSEC )\n    # Stop the autonomous control tasks\n\tauton_task_0.stop()\n \n#region VEXcode Competition Section\ndef vexcode_driver_function():\n    # Start the driver control tasks\n\tdriver_control_task_0 = Thread( ondriver_drivercontrol_0 )\n \n    # wait for the driver control period to end\n    while( competition.is_driver_control() and competition.is_enabled() ):\n        # wait 10 milliseconds before checking again\n        wait( 10, MSEC )\n    # Stop the driver control tasks\n\tdriver_control_task_0.stop()\n \n \n# register the competition functions\ncompetition = Competition( vexcode_driver_function, vexcode_auton_function )\n \nwhen_started1()\n#endregion VEXcode Competition Section\n","textLanguage":"python","rconfig":[],"slot":0,"platform":"V5","sdkVersion":"20220215.18.00.00","appVersion":"2.3.1","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","target":"Physical"}